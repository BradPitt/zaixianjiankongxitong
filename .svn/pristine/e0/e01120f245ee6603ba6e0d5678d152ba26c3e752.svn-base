using System;
using System.Text;
using System.Data.OracleClient;
using System.Collections.Generic;
using System.Data;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Entity;

namespace Business.BN
{
    public class DEVICEATTACH_BN
    {

        public bool Exists()
        {
            StringBuilder strSql = new StringBuilder();
            DbAPI dbHelper = new DbAPI();
            strSql.Append("select count(1) from DEVICEATTACH");
            strSql.Append(" where ");
            OracleParameter[] parameters = {
			};

            if (dbHelper.ExecuteNonQuery(strSql.ToString(), parameters) > 0)
            {
                return true;
            }
            else
            {
                return false;
            }

        }



        /// <summary>
        /// 增加一条数据
        /// </summary>
        public void Add(Entity.DEVICEATTACH model)
        {
            StringBuilder strSql = new StringBuilder();
            DbAPI dbHelper = new DbAPI();
            strSql.Append("insert into DEVICEATTACH(");
            strSql.Append("DEVICECODE,SEAAREA,PROVINCE,BAY,BUREAUDEVICE,LOCALDEVICE,SERVICE");
            strSql.Append(") values (");
            strSql.Append(":DEVICECODE,:SEAAREA,:PROVINCE,:BAY,:BUREAUDEVICE,:LOCALDEVICE,:SERVICE");
            strSql.Append(") ");

            OracleParameter[] parameters = {
			            new OracleParameter(":DEVICECODE", OracleType.Char,6) ,            
                        new OracleParameter(":SEAAREA", OracleType.VarChar,50) ,            
                        new OracleParameter(":PROVINCE", OracleType.VarChar,50) ,            
                        new OracleParameter(":BAY", OracleType.VarChar,50) ,            
                        new OracleParameter(":BUREAUDEVICE", OracleType.VarChar,50) ,            
                        new OracleParameter(":LOCALDEVICE", OracleType.VarChar,50) ,            
                        new OracleParameter(":SERVICE", OracleType.VarChar,50)             
              
            };

            parameters[0].Value = model.DEVICECODE;
            parameters[1].Value = model.SEAAREA;
            parameters[2].Value = model.PROVINCE;
            parameters[3].Value = model.BAY;
            parameters[4].Value = model.BUREAUDEVICE;
            parameters[5].Value = model.LOCALDEVICE;
            parameters[6].Value = model.SERVICE;
            dbHelper.ExecuteNonQuery(strSql.ToString(), parameters);

        }


        /// <summary>
        /// 更新一条数据
        /// </summary>
        public bool Update(Entity.DEVICEATTACH model)
        {
            StringBuilder strSql = new StringBuilder();
            DbAPI dbHelper = new DbAPI();
            strSql.Append("update DEVICEATTACH set ");

            strSql.Append(" DEVICECODE = :DEVICECODE , ");
            strSql.Append(" SEAAREA = :SEAAREA , ");
            strSql.Append(" PROVINCE = :PROVINCE , ");
            strSql.Append(" BAY = :BAY , ");
            strSql.Append(" BUREAUDEVICE = :BUREAUDEVICE , ");
            strSql.Append(" LOCALDEVICE = :LOCALDEVICE , ");
            strSql.Append(" SERVICE = :SERVICE  ");
            strSql.Append(" where  ");

            OracleParameter[] parameters = {
			            new OracleParameter(":DEVICECODE", OracleType.Char,6) ,            
                        new OracleParameter(":SEAAREA", OracleType.VarChar,50) ,            
                        new OracleParameter(":PROVINCE", OracleType.VarChar,50) ,            
                        new OracleParameter(":BAY", OracleType.VarChar,50) ,            
                        new OracleParameter(":BUREAUDEVICE", OracleType.VarChar,50) ,            
                        new OracleParameter(":LOCALDEVICE", OracleType.VarChar,50) ,            
                        new OracleParameter(":SERVICE", OracleType.VarChar,50)             
              
            };

            parameters[0].Value = model.DEVICECODE;
            parameters[1].Value = model.SEAAREA;
            parameters[2].Value = model.PROVINCE;
            parameters[3].Value = model.BAY;
            parameters[4].Value = model.BUREAUDEVICE;
            parameters[5].Value = model.LOCALDEVICE;
            parameters[6].Value = model.SERVICE;
            int rows = dbHelper.ExecuteNonQuery(strSql.ToString(), parameters);
            if (rows > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        /// <summary>
        /// 删除一条数据
        /// </summary>
        public bool Delete()
        {

            StringBuilder strSql = new StringBuilder();
            DbAPI dbHelper = new DbAPI();
            strSql.Append("delete from DEVICEATTACH ");
            strSql.Append(" where ");
            OracleParameter[] parameters = {
			};


            int rows = dbHelper.ExecuteNonQuery(strSql.ToString(), parameters);
            if (rows > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }



        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public Entity.DEVICEATTACH GetModel()
        {

            StringBuilder strSql = new StringBuilder();
            DbAPI dbHelper = new DbAPI();
            strSql.Append("select DEVICECODE, SEAAREA, PROVINCE, BAY, BUREAUDEVICE, LOCALDEVICE, SERVICE  ");
            strSql.Append("  from DEVICEATTACH ");
            strSql.Append(" where ");
            OracleParameter[] parameters = {
			};


            Entity.DEVICEATTACH model = new Entity.DEVICEATTACH();
            DataTable ds = dbHelper.GetDataTable(strSql.ToString(), parameters);

            if (ds.Rows.Count > 0)
            {
                model.DEVICECODE = ds.Rows[0]["DEVICECODE"].ToString();
                model.SEAAREA = ds.Rows[0]["SEAAREA"].ToString();
                model.PROVINCE = ds.Rows[0]["PROVINCE"].ToString();
                model.BAY = ds.Rows[0]["BAY"].ToString();
                model.BUREAUDEVICE = ds.Rows[0]["BUREAUDEVICE"].ToString();
                model.LOCALDEVICE = ds.Rows[0]["LOCALDEVICE"].ToString();
                model.SERVICE = ds.Rows[0]["SERVICE"].ToString();

                return model;
            }
            else
            {
                return null;
            }
        }


        /// <summary>
        /// 获得数据列表
        /// </summary>
        public DataTable GetList(string strWhere)
        {
            StringBuilder strSql = new StringBuilder();
            DbAPI dbHelper = new DbAPI();
            OracleParameter[] parameters = null;
            strSql.Append("select * ");
            strSql.Append(" FROM DEVICEATTACH ");
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }
            return dbHelper.GetDataTable(strSql.ToString(), parameters);
        }

        /// <summary>
        /// 获得前几行数据
        /// </summary>
        public DataTable GetList(int Top, string strWhere, string filedOrder)
        {
            StringBuilder strSql = new StringBuilder();
            DbAPI dbHelper = new DbAPI();
            OracleParameter[] parameters = null;
            strSql.Append("select ");
            if (Top > 0)
            {
                strSql.Append(" top " + Top.ToString());
            }
            strSql.Append(" * ");
            strSql.Append(" FROM DEVICEATTACH ");
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }
            strSql.Append(" order by " + filedOrder);
            return dbHelper.GetDataTable(strSql.ToString(), parameters);
        }

        public string GetMapEqipment(string strWhere)
        {
            StringBuilder strSql = new StringBuilder();
            DbAPI dbHelper = new DbAPI();
            OracleParameter[] parameters = null;
            strSql.Append("select * ");
            strSql.Append(" FROM DEVICEFULL ");
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }
            try
            {
                dbHelper.OpenConn("");
                DataTable dt = new DataTable();
                dt = dbHelper.GetDataTable(strSql.ToString(), parameters);
                dbHelper.CloseConn();
                string result = JsonConvert.SerializeObject(dt, new DataTableConverter());
                return result;

            }
            catch (Exception ex)
            {
                LogBN.WriteLog(typeof(DEVICEATTACH_BN), "GetMapEqipment 程序段的异常" + ex);
                return "";
            }
        }

        public string SearchEqipment(DEVICEATTACH model)
        {
            StringBuilder strSql = new StringBuilder();
            DbAPI dbHelper = new DbAPI();
            OracleParameter[] parameters = null;
            strSql.Append("select * ");
            strSql.Append(" FROM DEVICEFULL WHERE 1=1 ");
            if (model.SEAAREA != "全部")
            {
                strSql.Append(" AND SEAAREA = '" + model.SEAAREA + "'");
            }
            if (model.PROVINCE != "全部")
            {
                strSql.Append(" AND PROVINCE LIKE '%" + dbHelper.CheckDBNull(model.PROVINCE).ToString() + "%'");
            }
            if (model.BAY != "全部")
            {
                strSql.Append(" AND BAY = '" + model.BAY + "'");
            }
            if (model.BUREAUDEVICE != "全部")
            {
                strSql.Append(" AND BUREAUDEVICE ='" + model.BUREAUDEVICE + "'");
            }
            if (model.LOCALDEVICE != "全部")
            {
                strSql.Append(" AND LOCALDEVICE = '" + model.LOCALDEVICE + "'");
            }
            if (model.SERVICE != "全部")
            {
                strSql.Append(" AND SERVICE = '" + model.SERVICE + "'");
            }
            
            try
            {
                dbHelper.OpenConn("");
                DataTable dt = new DataTable();
                dt = dbHelper.GetDataTable(strSql.ToString(), parameters);
                dbHelper.CloseConn();
                string result = JsonConvert.SerializeObject(dt, new DataTableConverter());
                return result;

            }
            catch (Exception ex)
            {
                LogBN.WriteLog(typeof(DEVICEATTACH_BN), "SearchEqipment 程序段的异常" + ex);
                return "";
            }
        }

    }
}

